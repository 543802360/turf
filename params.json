{"name":"Geo.js","tagline":"a node.js library for performing gis operations","body":"geo.js\r\n======\r\n\r\na node.js library for performing geospatial operations with geojson\r\n\r\nPlease note that this api is still a bit unstable. I expect most of the core stuff to be nailed down in the next couple weeks though. If you notice any bugs, please submit an issue.\r\n\r\n    npm install geo.js\r\n\r\n- - -\r\n\r\n**Features**\r\n\r\n- load\r\n- point\r\n- linestring\r\n- polygon\r\n- extent\r\n- center\r\n- combine\r\n- distance\r\n- buffer\r\n- nearest\r\n- tin\r\n\r\n**Planned Features**\r\n\r\nAdditional feature requests welcomed and encouraged. To request a feature, please add a [github issue](https://github.com/morganherlocker/geo.js/issues) with a description.\r\n\r\n- tag\r\n- centroid\r\n- area\r\n- contour\r\n- filter\r\n- intersect\r\n- quantile\r\n- reclass\r\n- remove\r\n- style\r\n- union\r\n- erase\r\n- smooth\r\n\r\n- - -\r\n\r\n***Examples:***\r\n\r\n**load**\r\n\r\nLoads a feature collection or geometry from a file.\r\n\r\n    var g = require('geo')\r\n    g.load('path/to/file/example.json', function(layer, err){\r\n      if(err) throw err\r\n      console.log(layer)\r\n    })\r\n\r\n**point**\r\n\r\nCreates a point feature based on an x and a y coordinate. Properties can be added optionally.\r\n\r\n    var g = require('geo')\r\n    var point1 = g.point(-75.343, 39.984)\r\n    var point2 = g.point(-75.343, 39.984, {name: 'point 1', population: 5000})\r\n    console.log(point1)\r\n    console.log(point2)\r\n\r\n**linestring**\r\n\r\nCreates a linestring feature based on a coordinate array. Properties can be added optionally.\r\n\r\n    var g = require('geo')\r\n    var linestring1 = g.point([[102.0, -10.0], [103.0, 1.0], [104.0, 0.0], [130.0, 4.0]])\r\n    var linestring2 = g.point([[102.0, -10.0], [103.0, 1.0], [104.0, 0.0], [130.0, 4.0]], \r\n      {name: 'line 1', distance: 145})\r\n    console.log(linestring1)\r\n    console.log(linestring2)\r\n\r\n**polygon**\r\n\r\nCreates a polygon feature based on a coordinate array. Properties can be added optionally.\r\n\r\n    var g = require('geo')\r\n    var polygon1 = g.point([[[20.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]])\r\n    var polygon2 = g.point([[[20.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]], \r\n      {name: 'line 1', distance: 145})\r\n    console.log(polygon1)\r\n    console.log(polygon2)\r\n\r\n\r\n**extent**\r\n\r\nCalculates the extent of all features and returns a bounding box.\r\n\r\n    var g = require('geo')\r\n    g.load('path/to/file/example.json', function(layer, err){\r\n      if(err) throw err\r\n      g.extent(layer, function(extent){\r\n        console.log(extent)\r\n      })\r\n    })\r\n\r\n**center**\r\n\r\nCalculates the absolute center point of all features.\r\n\r\n    var g = require('geo')\r\n    g.load('path/to/file/example.json', function(layer, err){\r\n      if(err) throw err\r\n      g.center(layer, function(center){\r\n        console.log(center)\r\n      })\r\n    })\r\n\r\n**combine**\r\n\r\nCombines an array of point, linestring, or polygon features into multipoint, multilinestring, or multipolygon features\r\n    \r\n    var g = require('geo')\r\n    var p1 = {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n          50,\r\n          51\r\n        ]\r\n      }\r\n      var p2 = {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n          100,\r\n          101\r\n        ]\r\n      }\r\n      g.combine([p1, p2], function(err, combined){\r\n        if(err) throw err\r\n        console.log(combined)\r\n      })\r\n\r\n**buffer**\r\n\r\nBuffers a point feature to a given radius.\r\n\r\n    var g = require('geo')\r\n    var p = {\r\n      \"type\": \"Point\",\r\n      \"coordinates\": [\r\n        0,\r\n        0.05\r\n      ]\r\n    }\r\n    g.buffer(p, 10, function(err, buffered){\r\n      if(err) throw err\r\n      console.log(buffered)\r\n    })\r\n\r\n**distance**\r\n\r\nCalculates the distance between two point features.\r\n\r\n    var g = require('geo')\r\n    var point1 = { \r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\"type\": \"Point\", \"coordinates\": [-75.343, 39.984]}\r\n    }\r\n    var point2 = { \r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\"type\": \"Point\", \"coordinates\": [-75.534, 39.123]}\r\n    }\r\n    g.distance(point1, point2, 'miles', function(err, distance){\r\n      if(err) throw err\r\n      console.log(distance)\r\n    })\r\n\r\n**nearest**\r\n\r\nReturns the neares point feature.\r\n\r\n    var g = require('geo')    \r\n    var inPoint = { \r\n      \"type\": \"Feature\",\r\n      \"geometry\": {\"type\": \"Point\", \"coordinates\": [-75.4, 39.4]},\r\n      \"properties\": { \r\n        \"name\": \"Location A\",\r\n        \"category\": \"Store\"\r\n      }\r\n    }\r\n    var inFeatures = { \r\n      \"type\": \"FeatureCollection\",\r\n      \"features\": [\r\n        { \"type\": \"Feature\",\r\n          \"geometry\": {\"type\": \"Point\", \"coordinates\": [-75.343, 39.984]},\r\n          \"properties\": { \r\n            \"name\": \"Location A\",\r\n            \"category\": \"Store\"\r\n          }\r\n        },\r\n        { \"type\": \"Feature\",\r\n          \"geometry\": {\"type\": \"Point\", \"coordinates\": [-75.833, 39.284]},\r\n          \"properties\": { \r\n            \"name\": \"Location B\",\r\n            \"category\": \"House\"\r\n          }\r\n        },\r\n        { \"type\": \"Feature\",\r\n          \"geometry\": {\"type\": \"Point\", \"coordinates\": [ -75.534, 39.123]},\r\n          \"properties\": { \r\n            \"name\": \"Location C\",\r\n            \"category\": \"Office\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    g.nearest(inPoint, inFeatures, function(err, outPoint){\r\n      if(err) throw err\r\n      var nearest = { \r\n        \"type\": \"Feature\",\r\n        \"geometry\": {\"type\": \"Point\", \"coordinates\": [ -75.33, 39.44]},\r\n        \"properties\": { \r\n          \"name\": \"Location C\",\r\n          \"category\": \"Office\"\r\n        }\r\n      }\r\n    })\r\n\r\n**tin**\r\n\r\nTakes a set of points and the name of a z-value property and creates a tin (Triangulated Irregular Network). These are often used for developing elevation contour maps or stepped heat visualizations.\r\n\r\n    var g = require('geo')\r\n    var z = 'elevation'\r\n    g.load('/path/to/pointsfeatures/Points3.geojson', function(err, points){\r\n      g.tin(points, function(err, z, tin){\r\n        if(err) throw err\r\n        console.log(tin)\r\n      })\r\n    })\r\n\r\n- - -\r\n\r\n***Development***\r\n\r\n**Run Tests**\r\nmocha test/*\r\n\r\n- - -\r\n\r\n***Credits***\r\n\r\nThis library is built and maintained by @morganherlocker. If you would like to contribute, please do! :)\r\n\r\nI have taken a \"picasso\" approach to building this library, borrowing from existing code when available and modifying it to meet coding styles and standards of geo.js. Here is a list of places I have pulled ideas and/or code from (all open source or public domain, as far as I know):\r\n\r\nhttps://github.com/ironwallaby/delaunay\r\n\r\nhttps://github.com/jasondavies/conrec.js\r\n\r\nhttp://stackoverflow.com/a/839931/461015\r\n\r\nhttp://en.wikipedia.org/wiki/Haversine_formula\r\n\r\nhttp://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm \r\n\r\nhttps://github.com/mbloch/mapshaper\r\n\r\nhttp://en.wikipedia.org/wiki/Delaunay_triangulation\r\n\r\nhttp://svn.osgeo.org/grass/grass/branches/releasebranch_6_4/vector/v.overlay/main.c\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}